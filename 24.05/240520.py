#분수찾기 1193
# 문제
# 무한히 큰 배열에 다음과 같이 분수들이 적혀있다.

# 1/1	1/2	1/3	1/4	1/5	…
# 2/1	2/2	2/3	2/4	…	…
# 3/1	3/2	3/3	…	…	…
# 4/1	4/2	…	…	…	…
# 5/1	…	…	…	…	…
# …	…	…	…	…	…
# 이와 같이 나열된 분수들을 1/1 → 1/2 → 2/1 → 3/1 → 2/2 → … 과 같은 지그재그 순서로 차례대로 1번, 2번, 3번, 4번, 5번, … 분수라고 하자.

# X가 주어졌을 때, X번째 분수를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 X(1 ≤ X ≤ 10,000,000)가 주어진다.

# 출력
# 첫째 줄에 분수를 출력한다.

#나의 풀이
x = int(input())
hap = 0
lines = 1
#lines 가 짝수면 위에서 홀수면 아래서부터 시작
#lines는 각 라인 어떤분수든 그 분수의 (분모 분자 합) - 1
#x번째의 위치 찾기
while hap < x:
    hap = hap + lines
    lines += 1
#lines - 1 값이 x의 속해있는 lines이다 
#x= 5일때 lines-1=3이므로 3개의 분수를 가진 라인이고
#그 라인은 3개이므로 분모분자의 합은 4이고 아래서(분모가 1인 상태) 시작한다
#x - (hap-(lines-1)) = x 가 속한 lines의 x위치
loc_x = x - (hap-(lines-1))
mo = 0 #분모
ja = 0 #분자
if (lines-1) % 2 != 0: #lines가 홀수일때
    ja = lines
    for _ in range(loc_x):
       ja -= 1 
    for _ in range(loc_x):
        mo += 1
    print(ja,end='')
    print('/',end='')
    print(mo)
            
else: #짝수일때 위에서 시작
    mo = lines
    for _ in range(loc_x):
       ja += 1 
    for _ in range(loc_x):
        mo -= 1
    print(ja,end='')
    print('/',end='')
    print(mo)

#다른 풀이
num = int(input())
line = 1

#num의 위치 찾기
while num > line: #라인의 수가 num보다 커지면 종료
    num -= line #num에서 첫번째 라인 분수 수만큼 뺀다
    line += 1 #다음 라인으로 넘어가기
#종료시 num,line이 해당 num의 좌표
#지그재그로 진행됨으로 라인이 홀수 일때와 짝수일때의 시작위치가 다르다
# 짝수일경우
if line % 2 == 0: 
    a = num #분자는 1부터 1칸 늘어날때마다 1씩늘어나므로 해당 num을 바로 사용
    b = line - num + 1
    #분모는 최댓값이 해당line과 같으므로 +1 을하여 초기화를 하고 num만큼  빼준다
# 홀수일경우
#위 과정 반대로
elif line % 2 == 1:
    a = line - num + 1
    b = num

print(f'{a}/{b}')

#달팽이는 올라가고 싶다 2869
# 문제
# 땅 위에 달팽이가 있다. 이 달팽이는 높이가 V미터인 나무 막대를 올라갈 것이다.

# 달팽이는 낮에 A미터 올라갈 수 있다. 하지만, 밤에 잠을 자는 동안 B미터 미끄러진다. 또, 정상에 올라간 후에는 미끄러지지 않는다.

# 달팽이가 나무 막대를 모두 올라가려면, 며칠이 걸리는지 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 세 정수 A, B, V가 공백으로 구분되어서 주어진다. (1 ≤ B < A ≤ V ≤ 1,000,000,000)

# 출력
# 첫째 줄에 달팽이가 나무 막대를 모두 올라가는데 며칠이 걸리는지 출력한다.

#나의 풀이
#입력
A,B,V = map(int,input().split())
#V - B 는 달팽이가 마지막날에 미끄러지지않음을 고려한 실제 높이 A - B는 하루에 올라가는 높이
if (V - B) % (A-B) == 0: #만약 올라가는 높이가 나뭇가지의 높이와 딱맞으면
    result = (V-B) // (A-B)
else: #올라가는 높이가 남으면
    result = ((V - B) // (A-B)) + 1 
print(result)

#다른 풀이
import math
result = (V-B) // (A-B)
print(math.ceil(result))
# ceil() 함수는 괄혼안에 실수를 올림하여 정수를 반환
